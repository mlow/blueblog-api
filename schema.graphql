"""
A date and time in UTC ISO8601 format. Ex: 2020-05-28T23:12:35.459Z
"""
scalar DateTime

"""
The node interface for conformal to Global Object Identification.
"""
interface Node {
  "An object's globally unique ID."
  id: ID!
}

"""
An author which writes posts.
"""
type Author implements Node {
  id: ID!

  "The author's name."
  name: String!

  "All posts written by this author."
  posts: [Post!]!
}

"""
A change made to a post.
"""
type PostEditChange {
  "A segment of text."
  text: String!

  "Whether the text was added."
  added: Boolean

  "Whether the text was removed."
  removed: Boolean
}

"""
An edit made to a post.
"""
type PostEdit implements Node {
  id: ID!

  "The post this edit was made to."
  post: Post!

  "The date/time of this edit."
  date: DateTime!

  "The changes made to the post."
  changes: [PostEditChange!]!
}

"""
A blog post.
"""
type Post implements Node {
  id: ID!

  "The author of the post."
  author: Author!

  "The title of the post."
  title: String!

  "The content of the post."
  content: String!

  "Whether this post is currently published."
  is_published: Boolean!

  "The date the post was (or will be) published."
  publish_date: DateTime!

  "All edits that have been made this post from most recent to oldest."
  edits: [PostEdit!]!
}

"""
A post comment.
"""
type Comment implements Node {
  id: ID!

  "The comment."
  comment: String!

  "The name of the author of the comment, may be anonymous."
  author: String

  "The date the comment was left on."
  published: DateTime!

  "Whether the comment is hidden."
  hidden: Boolean!
}

input CreateAuthorInput {
  name: String!
  username: String!
  password: String!
}

input CreatePostInput {
  author_id: ID!
  title: String!
  content: String!
  is_published: Boolean
  publish_date: DateTime
}

input UpdatePostInput {
  title: String
  content: String
  is_published: Boolean
  publish_date: DateTime
}

type Query {
  node(id: ID!): Node
  author(name: String!): Author
  authors: [Author!]!
  posts: [Post!]!
}

type Mutation {
  authenticate(username: String!, password: String!): String
  createAuthor(input: CreateAuthorInput!): Author
  createPost(input: CreatePostInput!): Post
  updatePost(id: ID!, input: UpdatePostInput!): Post
  deletePost(id: ID!): ID
}
